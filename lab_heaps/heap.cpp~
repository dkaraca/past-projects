/**
 * @file heap.cpp
 * Implementation of a heap class.
 */
#include <math.h>
template <class T, class Compare>
size_t heap<T, Compare>::root() const {
    /// @todo Update to return the index you are choosing to be your root.
    return 1;
}

template <class T, class Compare>
size_t heap<T, Compare>::leftChild( size_t currentIdx ) const {
    /// @todo Update to return the index of the left child.
    return (currentIdx*2);
}

template <class T, class Compare>
size_t heap<T, Compare>::rightChild( size_t currentIdx ) const {
    /// @todo Update to return the index of the right child.
    return (currentIdx*2)+1;
}

template <class T, class Compare>
size_t heap<T, Compare>::parent( size_t currentIdx ) const {
    /// @todo Update to return the index of the parent.
    return floor(currentIdx/2);
}

template <class T, class Compare>
bool heap<T, Compare>::hasAChild( size_t currentIdx ) const {
    /// @todo Update to return whether the given node has a child
    if(_elems[currentIdx*2])
	return true;
    return false;
}

template <class T, class Compare>
size_t heap<T, Compare>::maxPriorityChild( size_t currentIdx ) const {
    /// @todo Update to return the index of the child with highest priority
    ///   as defined by higherPriority()
	if(higherPriority(_elems[leftChild(currentIdx)], _elems[rightChild(currentIdx)])) 
		return leftChild(currentIdx);
	return rightChild(currentIdx);
}

template <class T, class Compare>
void heap<T, Compare>::heapifyDown( size_t currentIdx ) {
    /// @todo Implement the heapifyDown algorithm.
	//if(currentIdx == _elems.size()) return;
	//int size = _elems.size();
	if((currentIdx*2)<_elems.size()){
	size_t child = maxPriorityChild(currentIdx);
	if(higherPriority(_elems[child], _elems[currentIdx])){
		std::swap(_elems[child], _elems[currentIdx]);
		heapifyDown(child);
	}
	}
	
}

template <class T, class Compare>
void heap<T, Compare>::heapifyUp( size_t currentIdx ) {
    if( currentIdx == root() )
        return;
    size_t parentIdx = parent( currentIdx );
    if( higherPriority( _elems[ currentIdx ], _elems[ parentIdx ] ) ) {
        std::swap( _elems[ currentIdx ], _elems[ parentIdx ] );
        heapifyUp( parentIdx );
    }
}

template <class T, class Compare>
heap<T, Compare>::heap() {
    /// @todo Depending on your implementation, this function may or may
    ///   not need modifying
	//_elems.resize(2);
	_elems.push_back(0);
}

template <class T, class Compare>
heap<T, Compare>::heap( const std::vector<T> & elems ) {
    /// @todo Construct a heap using the buildHeap algorithm
	//_elems.resize(elems.size()+1);
	//int size =
	
	int size = elems.size();
	_elems.push_back(0);
	for(int i = 0; i<size; i++)
		_elems.push_back(elems[i]);
	for(int i = parent(_elems.size()); i>=1; i--)
		heapifyDown(i);
	//for(int i = 1; i<size; i++)
	//	push(elems[i-1]);
	//for(int i = 0; i<size; i++){
	//	_elems[i] = _elems[i+1];
	/////////////////	if(i == (size-1)) _elems.resize(elems.size());
	//}
}

template <class T, class Compare>
T heap<T, Compare>::pop() {
    /// @todo Remove, and return, the element with highest priority
	int size = _elems.size();
	T tmp = _elems[1];
	_elems[1] = _elems[size-1];
	_elems.pop_back();
	heapifyDown(1);
	return tmp;
}

template <class T, class Compare>
T heap<T, Compare>::peek() const {
    /// @todo Return, but do not remove, the element with highest priority
    return _elems[1];
}

template <class T, class Compare>
void heap<T, Compare>::push( const T & elem ) {
    /// @todo Add elem to the heap
	int size = _elems.size();
	//int capacity = _elems.capacity();
	//if(size == capacity) growArray();
	_elems.resize(_elems.size()+1);
	_elems[size] = elem;
	heapifyUp(size);	
}

template <class T, class Compare>
bool heap<T, Compare>::empty() const {
    /// @todo Determine if the heap is empty
    return _elems.empty();
}

template <class T, class Compare>
void heap<T, Compare>::growArray() {
	_elems.resize(_elems.size()*2);
}
